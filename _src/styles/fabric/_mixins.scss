//---------------------------------------------------------
// Mixins
//---------------------------------------------------------

//---------------------------------------------------------
// Responsive Font
//
// Responsive Font takes a base-font in ems and converts it to a vw font size.
// When the font-size can be fluid, it's fluid by using the vw font-size.
// When it's larger than the breakpoint, it's the base font
// When it's smaller than the min-font-size, it switches to ems as well.
//---------------------------------------------------------
@mixin responsive-font($base-font-size, $min-font-size:0, $base-width:1000, $default-font-size:16) {
	// first figure out if there is a min font. If not, make it half the base-font-size, but at least 1em
	@if $min-font-size == 0 {
		$min-font-size: $base-font-size / 2;
		@if $min-font-size < 1 {
			$min-font-size: 1;
		}
	}
	// get the base font-size in vw:
	$base-font-size--vw: ( ( $base-font-size * $default-font-size ) / $base-width ) * 100;

	// from the base font-size in vw, we can calculate where the min-font-size breakpoint will occur:
	$font-breakpoint: ( $min-font-size * $default-font-size ) / ($base-font-size--vw / 100 );

	// now we set the responsive font:
	font-size: $base-font-size--vw * 1vw;

	// on viewports *above* the base-width, we use the base-font-size em value:
	@media only screen and (min-width: (($base-width + 1) * 1px) ) {
		font-size: $base-font-size * 1em;
	}

	// we use the min-font-size em value at the calculated breakpoint where the min-font-size equals the vw font-size:
	@media only screen and (max-width: ($font-breakpoint * 1px) ) {
		font-size: $min-font-size * 1em;
	}
}

//---------------------------------------------------------
// Responsive
//---------------------------------------------------------
@mixin responsive($property, $start, $finish, $unit:em) {
	#{$property}: #{$start}#{$unit};
	$breaks: length($breakpoints);
	$diff: $start - $finish;
	$eachdiff: $diff / $breaks;
	@each $breakpoint in $breakpoints {
		@media only screen and (max-width: #{$breakpoint}) {
			$start: $start - $eachdiff;
			#{$property}: #{$start}#{$unit};
		}
	}
}
//---------------------------------------------------------
// Triangle
//---------------------------------------------------------
@mixin triangle ($color,$pointing,$side1,$side2,$side3) {
	width: 0;
	height: 0;
	@if $pointing == up {
		border-top: none;
		border-right: $side1 solid transparent;
		border-bottom: $side2 solid $color;
		border-left: $side3 solid transparent;
	}
	@if $pointing == right {

		border-top: $side1 solid transparent;
		border-right: none;
		border-left: $side2 solid $color;
		border-bottom: $side3 solid transparent;
	}
	@if $pointing == left {
		border-top: $side1 solid transparent;
		border-right: $side2 solid $color;
		border-left: none;
		border-bottom: $side3 solid transparent;
	}
	@if $pointing == down {
		border-top: $side1 solid $color;
		border-right: $side2 solid transparent;
		border-left: $side3 solid transparent;
		border-bottom: none;
	}
}

//---------------------------------------------------------
// Create Percentage Point
//---------------------------------------------------------
@mixin create-percentage-point ($x, $y, $total-width, $total-height, $direction-x: left, $direction-y: top) {
	@if $direction-y == top {
		top: ( $y / $total-height ) * 100%;
	} @else {
		bottom: ( ( $total-height - $y ) / $total-height ) * 100%;
	}
	@if $direction-x == left {
		left: ( $x / $total-width ) * 100%;
	} @else {
		right: ( ( $total-width - $x ) / $total-width ) * 100%;
	}
}

//---------------------------------------------------------
// Create Percentage Size
//---------------------------------------------------------
@mixin create-percentage-size($length, $total-width, $total-height, $type:vertical, $stroke:0 ) {
	@if $type == vertical {
		@if $stroke > 0 {
			width: $stroke * 1px;
		}
		height: $length / $total-height * 100%;
	} @else {
		width: $length / $total-width * 100%;
		@if $stroke > 0 {
			height: $stroke * 1px;
		}
	}
}